[General]
# Default fall-back configuration (if something was missed). no Network declared
sim-time-limit = 100s

# Source parameters
*.scanner[*].interArrivalTime =  exponential(0.1s)

# -- Queue parameters --
*.queue.capacity = -1  # Set -1 for infinite queue
*.queue.serviceTime =exponential(0.0001s)  # Service time per job
*.queue2.capacity = -1  # Set -1 for infinite queue
*.queue2.serviceTime =exponential(0.0001s)  # Service time per job
# -- Orch parameters --
*.orchestrator[*].prefetchcount =1  # Service time per job
*.orchestrator[*].TimeToConsume = exponential(0.25s)
*.orchestrator[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
*.orchestrator[*].nameOfService ="orch"
# -- Catalog parameters --
*.catalog[*].TimeToConsume = exponential(5s)
*.catalog[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
*.catalog[*].nameOfService ="catalog"  # Name of service
# -- Number of units used --
**.numScanners = 1
**.numcatalogs = 5
**.numOrchs  = 2

## ======================DYNAMIC SIMULATION============================ ##

[Config Dynamic-Base]
network = DynamicNetwork
sim-time-limit = 100s

# -- Source parameters --
*.scanner[*].interArrivalTime =  exponential(0.1s)

# -- Queue parameters --
*.queue.capacity = 100  # Set -1 for infinite queue
*.queue.serviceTime =exponential(0.0001s)  # Service time per job
*.queue2.capacity = 100  # Set -1 for infinite queue
*.queue2.serviceTime =exponential(0.0001s)  # Service time per job
# -- Orch parameters --
*.orchestrator[*].TimeToConsume = exponential(0.25s)
*.orchestrator[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
# -- Catalog parameters --
*.catalog[*].TimeToConsume = exponential(5s)
*.catalog[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
# -- Number of units used --
**.numScanners = 2
**.numOrchs  = 10
**.numcatalogs = 20

# -- Controller-specific configurations - Linear function (default) -- 
*.controller.SamplingFreq =  0.5 # sample queue lengths every 0.5 seconds
*.controller.queue1SamplingHistory = 120 # history of 1 minute
*.controller.queue2SamplingHistory = 120 # history of 1 minute
*.controller.queue1FullThrottle = 80 # queue length when we deploy optimal number of pods
*.controller.queue2FullThrottle = 80 # queue length when we deploy optimal number of pods
*.controller.numMinOrchs = 2 # lowest number of orchs to be scaled-down to
*.controller.numMinCatalog = 2 # lowest number of catalogs to be scaled-down to
*.controller.PodReductionThreshold = 120 # ramp-up time before down-scaling is possible (should be at >=sampling history length)

### ------ LINEAR CONTROLLER ------- ###
[Config Linear_Controller_Sweep_base]
extends = Dynamic-Base
sim-time-limit = 3600s # ~3 hours

# global pod parameters
**.numScanners = 3
**.numOrchs  = 14
**.numcatalogs = 174

# where to save results
result-dir = results/sweep

# for easier parsing, splitting the parameter-sweep into different configs, running the same seeds
[Config LinearControl_SamplingRate_0_25]
extends = Linear_Controller_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 0.25
*.controller.queueFullThrottle = ${75,85,100}

*.controller.samplingPairIndex = ${0..2} # zipping queue1&2 sampling history together
*.controller.queue1SamplingHistory = ${select(samplingPairIndex, 60, 120, 240)}
*.controller.queue2SamplingHistory = ${select(samplingPairIndex, 60, 120, 240)}


[Config LinearControl_SamplingRate_0_50]
extends = Linear_Controller_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 0.5
*.controller.queueFullThrottle = ${75,85,100}

*.controller.samplingPairIndex = ${0..2} # zipping queue1&2 sampling history together
*.controller.queue1SamplingHistory = ${select(samplingPairIndex, 30, 60, 120)}
*.controller.queue2SamplingHistory = ${select(samplingPairIndex, 30, 60, 120)}


[Config LinearControl_SamplingRate_1_00]
extends = Linear_Controller_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 1
*.controller.queueFullThrottle = ${75,85,100}

*.controller.samplingPairIndex = ${0..2} # zipping queue1&2 sampling history together
*.controller.queue1SamplingHistory = ${select(samplingPairIndex, 15, 30, 60)}
*.controller.queue2SamplingHistory = ${select(samplingPairIndex, 15, 30, 60)}


[Config QDTE_Sweep_base]
# Base config for QDTE control function simulations
extends = Dynamic-Base
*.controller.controlFuncUsed = "QDTE"
sim-time-limit = 3600s # 1 hour

#global pod parameters
**.numScanners = 3
**.numOrchs  = 14
**.numcatalogs = 174

# where to save results
result-dir = results/QDTE

[Config QDTE_SamplingRate_0_25]
extends = QDTE_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 0.25
*.controller.stabilityThreshold = ${5,15,30,60}

*.controller.samplingPairIndex = ${0..2} # zipping together latency targets
*.controller.latencyTargetQueue1 = ${select(samplingPairIndex, 0.01, 0.005, 0.002)} # compared to static: x10, x5, x2
*.controller.latencyTargetQueue2 = ${select(samplingPairIndex, 0.08, 0.04, 0.016)} # compared to static: x10, x5, x2

[Config QDTE_SamplingRate_0_50]
extends = QDTE_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 0.5
*.controller.stabilityThreshold = ${5,15,30,60}

*.controller.samplingPairIndex = ${0..2} # zipping together latency targets
*.controller.latencyTargetQueue1 = ${select(samplingPairIndex, 0.01, 0.005, 0.002)} # compared to static: x10, x5, x2
*.controller.latencyTargetQueue2 = ${select(samplingPairIndex, 0.08, 0.04, 0.016)} # compared to static: x10, x5, x2

[Config QDTE_SamplingRate_1_00]
extends = QDTE_Sweep_base
experiment-label = ${repetition} ++ ${configname}
repeat=5

# Controller-specific configurations - Linear function
*.controller.numMinOrchs = 1
*.controller.numMinCatalog = 1
*.controller.SamplingFreq = 1
*.controller.stabilityThreshold = ${5,15,30,60}

*.controller.samplingPairIndex = ${0..2} # zipping together latency targets
*.controller.latencyTargetQueue1 = ${select(samplingPairIndex, 0.01, 0.005, 0.002)} # compared to static: x10, x5, x2
*.controller.latencyTargetQueue2 = ${select(samplingPairIndex, 0.08, 0.04, 0.016)} # compared to static: x10, x5, x2


## ================================ STATIC NETWORK CONFIGS ================================ ##
[Config Static-Base]
network = StaticNetwork
sim-time-limit = 100s

# -- Source parameters --
*.scanner[*].interArrivalTime =  exponential(0.1s)
# -- Queue parameters --
*.queue.capacity = -1  # Set -1 for infinite queue
*.queue.serviceTime =exponential(0.0001s)  # Service time per job
*.queue2.capacity = -1  # Set -1 for infinite queue
*.queue2.serviceTime =exponential(0.0001s)  # Service time per job
# -- Orch parameters --
*.orchestrator[*].prefetchcount =1  # Service time per job
*.orchestrator[*].TimeToConsume = exponential(0.25s)
*.orchestrator[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
*.orchestrator[*].nameOfService ="orch"
# -- Catalog parameters --
*.catalog[*].TimeToConsume = exponential(5s)
*.catalog[*].TimeToWaitIfQueueIsEmpty = exponential(0.001s)
*.catalog[*].nameOfService ="catalog"  # Name of service

**.numScanners = 1
**.numcatalogs = 5
**.numOrchs  = 2


[Config sanityCheck]
# sanity check to verify results match the theoretical values
# the arrival time is slower x3 compared to real used value, so the queue is bounded and theoretical results can mean something
extends = Static-Base
sim-time-limit =10000s
repeat = 10

**.numScanners = 1
**.numcatalogs = 5
**.numOrchs  = 1
# Adjust arrival rates so the queue can stablize with just 1 unit of scanner & orch
*.scanner[*].interArrivalTime =  exponential(0.3s)
*.orchestrator[*].TimeToConsume = exponential(0.25s)


[Config scanner_Orchs_Sweep_queue_100]
# this config sweeped num of scanners&orchs to find the sweet-spot for balancing queue1 statically 
extends = Static-Base
sim-time-limit = 10000s # ~3 hours
repeat = 1

## common settings - 2nd queue unbounded, only 1 catalog (faster simulation)
**.numcatalogs = ${catalog = 1} # this is just to speed things up - the 2nd queue is unbounded anyways
*.queue.capacity = 100  # Set -1 for infinite queue
*.queue2.capacity = -1  # Set -1 for infinite queue

## ===== normal load =====
## initial 'scan-through'
**.numScanners = ${scan=1,2,3,4,5}
**.numOrchs = ${orch=5,10,20,25}

## --focusing on the 10-15 orch range--
#**.numScanners = ${scan=3}
#**.numOrchs = ${orch=10,11,12,13,14,15}

## ===== busy load =====
## initial 'scan-through'
#**.numScanners = ${scan=4,5,6}
#**.numOrchs = ${orch=10,15,20,25}

## --focusing on the 15-20 orch range--
#**.numScanners = ${scan=5}
#**.numOrchs = ${orch=15,16,17,18}


[Config Scanner_Orchs_Sweep_multi_seed]
# static queue1 simulation, sweeping the same scenario for multiple seeds
extends = Static-Base
sim-time-limit = 10000s # ~3 hours
repeat = 20 # numbers of re-runs - different seed each time

**.numcatalogs = ${catalog = 1} # not testing this queue, use less modules for faster simulation
*.queue.capacity = 100  # Set -1 for infinite queue
*.queue2.capacity = -1  # infinite queue (for faster simulation)

## ===== normal load =====
**.numScanners = ${scan=3}
**.numOrchs = ${orch=13,14}

## ===== busy load ===== 
#**.numScanners = ${scan=5}
#**.numOrchs = ${orch=18,19}


[Config Orchs_Catalogs_Sweep]
# this config sweeped num of orchs&catalogs to find the sweet-spot for balancing queue2 statically 
extends = Static-Base
sim-time-limit = 10000s # ~3 hours
repeat = 1

# common settings - both queues bounded to 100
*.queue.capacity = 100  # Set -1 for infinite queue
*.queue2.capacity = 100  # Set -1 for infinite queue

## ===== normal load =====
#**.numScanners = ${scan=3}
#**.numOrchs = ${orch=14}
#**.numcatalogs = ${catalog = 165, 170, 175, 180}
#**.numcatalogs = ${catalog = 169,171,172,173,174,175}

## ===== busy load ===== 
**.numScanners = ${scan=5}
**.numOrchs = ${orch=19}
**.numcatalogs = ${catalog = 270,275,280}


[Config Orchs_Catalogs_Sweep_multi_seed]
# static queue2 simulation, sweeping the same scenario for multiple seeds
extends = Static-Base
sim-time-limit = 10000s # ~3 hours
repeat = 10 # numbers of re-runs - different seed each time

*.queue.capacity = 100  # Set -1 for infinite queue
*.queue2.capacity = 100  # Set -1 for infinite queue

## ===== normal load =====
**.numScanners = 3
**.numOrchs = 14
**.numcatalogs = ${catalog = 170,171,172,173,174}

## ===== busy load ===== 
#**.numScanners = 5
#**.numOrchs = 19
#**.numcatalogs = ${catalog = 279,280,281}


[Config Static_comparison_runs]
# config used to have cleaner comparisons with the dynamic simulation results
extends = Static-Base
sim-time-limit = 3600s
repeat = 5 # numbers of re-runs - different seed each time
experiment-label = ${repetition}
*.queue.capacity = 100
*.queue2.capacity = 100

**.numScanners = 3
**.numOrchs  = 14
**.numcatalogs = 174
result-dir = static_sweep/results


